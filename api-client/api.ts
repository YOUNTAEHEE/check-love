/* tslint:disable */
/* eslint-disable */
/**
 * Check Love API
 * Check Love 앱을 위한 API 명세서
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 인증 컨텍스트 정보
 * @export
 * @interface AuthContext
 */
export interface AuthContext {
    /**
     * 현재 사용자의 인증 상태
     * @type {boolean}
     * @memberof AuthContext
     */
    'isAuthenticated': boolean;
    /**
     * 요청한 사용자 정보가 현재 로그인한 사용자인지 여부
     * @type {boolean}
     * @memberof AuthContext
     */
    'isCurrentUser': boolean;
}
/**
 * 
 * @export
 * @interface CommonResponse
 */
export interface CommonResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CommonResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CommonResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ErrorResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ErrorResponseErrorsInner>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<ErrorResponseErrorsInner>;
}
/**
 * 에러 응답
 * @export
 * @interface ErrorResponse1
 */
export interface ErrorResponse1 {
    /**
     * HTTP 상태 코드
     * @type {number}
     * @memberof ErrorResponse1
     */
    'status': number;
    /**
     * 에러 코드
     * @type {string}
     * @memberof ErrorResponse1
     */
    'code': string;
    /**
     * 에러 메시지
     * @type {string}
     * @memberof ErrorResponse1
     */
    'message': string;
    /**
     * 에러 발생 시간
     * @type {string}
     * @memberof ErrorResponse1
     */
    'timestamp': string;
    /**
     * 에러가 발생한 API 경로
     * @type {string}
     * @memberof ErrorResponse1
     */
    'path'?: string;
    /**
     * 상세 에러 목록
     * @type {Array<ErrorResponse1ErrorsInner>}
     * @memberof ErrorResponse1
     */
    'errors'?: Array<ErrorResponse1ErrorsInner>;
}
/**
 * 
 * @export
 * @interface ErrorResponse1ErrorsInner
 */
export interface ErrorResponse1ErrorsInner {
    /**
     * 에러가 발생한 필드
     * @type {string}
     * @memberof ErrorResponse1ErrorsInner
     */
    'field'?: string;
    /**
     * 에러 메시지
     * @type {string}
     * @memberof ErrorResponse1ErrorsInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponseErrorsInner
 */
export interface ErrorResponseErrorsInner {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseErrorsInner
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseErrorsInner
     */
    'message'?: string;
}
/**
 * 로그인 요청
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {LoginRequestAccountInfo}
     * @memberof LoginRequest
     */
    'accountInfo': LoginRequestAccountInfo;
    /**
     * 
     * @type {LoginRequestOptions}
     * @memberof LoginRequest
     */
    'options'?: LoginRequestOptions;
}
/**
 * 로그인 계정 정보
 * @export
 * @interface LoginRequestAccountInfo
 */
export interface LoginRequestAccountInfo {
    /**
     * 사용자명 또는 이메일
     * @type {string}
     * @memberof LoginRequestAccountInfo
     */
    'username': string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof LoginRequestAccountInfo
     */
    'password': string;
}
/**
 * 로그인 옵션
 * @export
 * @interface LoginRequestOptions
 */
export interface LoginRequestOptions {
    /**
     * 로그인 상태 유지 여부
     * @type {boolean}
     * @memberof LoginRequestOptions
     */
    'rememberMe'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'totalPages'?: number;
}
/**
 * 비밀번호 재설정 요청
 * @export
 * @interface PasswordResetRequest
 */
export interface PasswordResetRequest {
    /**
     * 
     * @type {PasswordResetRequestAccountInfo}
     * @memberof PasswordResetRequest
     */
    'accountInfo': PasswordResetRequestAccountInfo;
}
/**
 * 계정 정보
 * @export
 * @interface PasswordResetRequestAccountInfo
 */
export interface PasswordResetRequestAccountInfo {
    /**
     * 이메일 주소
     * @type {string}
     * @memberof PasswordResetRequestAccountInfo
     */
    'email': string;
}
/**
 * 회원가입 요청
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {RegisterRequestBasicInfo}
     * @memberof RegisterRequest
     */
    'basicInfo': RegisterRequestBasicInfo;
    /**
     * 
     * @type {RegisterRequestAccountInfo}
     * @memberof RegisterRequest
     */
    'accountInfo': RegisterRequestAccountInfo;
}
/**
 * 사용자 계정 정보
 * @export
 * @interface RegisterRequestAccountInfo
 */
export interface RegisterRequestAccountInfo {
    /**
     * 이메일 주소
     * @type {string}
     * @memberof RegisterRequestAccountInfo
     */
    'email': string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof RegisterRequestAccountInfo
     */
    'password': string;
}
/**
 * 사용자 기본 정보
 * @export
 * @interface RegisterRequestBasicInfo
 */
export interface RegisterRequestBasicInfo {
    /**
     * 사용자명
     * @type {string}
     * @memberof RegisterRequestBasicInfo
     */
    'username': string;
    /**
     * 표시 이름
     * @type {string}
     * @memberof RegisterRequestBasicInfo
     */
    'displayName': string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof RegisterRequestBasicInfo
     */
    'profileImageUrl'?: string;
}
/**
 * 사용자 간 소셜 관계 정보
 * @export
 * @interface SocialContext
 */
export interface SocialContext {
    /**
     * 현재 사용자가 대상 사용자를 팔로우하는지 여부
     * @type {boolean}
     * @memberof SocialContext
     */
    'isFollowing': boolean;
    /**
     * 대상 사용자가 현재 사용자를 팔로우하는지 여부
     * @type {boolean}
     * @memberof SocialContext
     */
    'isFollower': boolean;
}
/**
 * 토큰 응답
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {TokenResponseAuthToken}
     * @memberof TokenResponse
     */
    'authToken': TokenResponseAuthToken;
}
/**
 * 인증 토큰 정보
 * @export
 * @interface TokenResponseAuthToken
 */
export interface TokenResponseAuthToken {
    /**
     * 인증 토큰
     * @type {string}
     * @memberof TokenResponseAuthToken
     */
    'token': string;
    /**
     * 리프레시 토큰
     * @type {string}
     * @memberof TokenResponseAuthToken
     */
    'refreshToken': string;
    /**
     * 토큰 만료 시간
     * @type {string}
     * @memberof TokenResponseAuthToken
     */
    'tokenExpiresAt': string;
}
/**
 * 사용자 상세 프로필 정보 응답
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 사용자 ID
     * @type {number}
     * @memberof UserProfileResponse
     */
    'id': number;
    /**
     * 사용자명
     * @type {string}
     * @memberof UserProfileResponse
     */
    'username': string;
    /**
     * 표시 이름
     * @type {string}
     * @memberof UserProfileResponse
     */
    'displayName': string;
    /**
     * 이메일 주소
     * @type {string}
     * @memberof UserProfileResponse
     */
    'email': string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof UserProfileResponse
     */
    'profileImageUrl'?: string;
    /**
     * 자기소개
     * @type {string}
     * @memberof UserProfileResponse
     */
    'bio'?: string;
    /**
     * 위치
     * @type {string}
     * @memberof UserProfileResponse
     */
    'location'?: string;
    /**
     * 웹사이트
     * @type {string}
     * @memberof UserProfileResponse
     */
    'website'?: string;
    /**
     * 팔로워 수
     * @type {number}
     * @memberof UserProfileResponse
     */
    'followersCount'?: number;
    /**
     * 팔로잉 수
     * @type {number}
     * @memberof UserProfileResponse
     */
    'followingCount'?: number;
    /**
     * 가입 일시
     * @type {string}
     * @memberof UserProfileResponse
     */
    'createdAt': string;
    /**
     * 마지막 활동 시간
     * @type {string}
     * @memberof UserProfileResponse
     */
    'lastActiveAt'?: string;
    /**
     * 
     * @type {UserProfileResponseAccountContext}
     * @memberof UserProfileResponse
     */
    'accountContext'?: UserProfileResponseAccountContext;
    /**
     * 
     * @type {SocialContext}
     * @memberof UserProfileResponse
     */
    'socialContext'?: SocialContext;
}
/**
 * 계정 관련 컨텍스트 정보
 * @export
 * @interface UserProfileResponseAccountContext
 */
export interface UserProfileResponseAccountContext {
    /**
     * 인증된 계정 여부
     * @type {boolean}
     * @memberof UserProfileResponseAccountContext
     */
    'isVerified'?: boolean;
    /**
     * 비공개 계정 여부
     * @type {boolean}
     * @memberof UserProfileResponseAccountContext
     */
    'isPrivate'?: boolean;
}
/**
 * 사용자 기본 정보 응답
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 사용자 ID
     * @type {number}
     * @memberof UserResponse
     */
    'id': number;
    /**
     * 사용자명
     * @type {string}
     * @memberof UserResponse
     */
    'username': string;
    /**
     * 표시 이름
     * @type {string}
     * @memberof UserResponse
     */
    'displayName': string;
    /**
     * 이메일 주소
     * @type {string}
     * @memberof UserResponse
     */
    'email': string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof UserResponse
     */
    'profileImageUrl'?: string;
    /**
     * 가입 일시
     * @type {string}
     * @memberof UserResponse
     */
    'createdAt': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 이메일과 비밀번호를 입력하여 로그인합니다. 성공 시 액세스 토큰과 리프레시 토큰을 반환합니다.
         * @summary 사용자 로그인
         * @param {LoginRequest} loginRequest 로그인 요청 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authLogin', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인된 사용자를 로그아웃 처리합니다.
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 비밀번호 재설정을 위한 이메일을 발송합니다.
         * @summary 비밀번호 재설정 요청
         * @param {PasswordResetRequest} passwordResetRequest 비밀번호 재설정 요청 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPasswordReset: async (passwordResetRequest: PasswordResetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetRequest' is not null or undefined
            assertParamExists('authPasswordReset', 'passwordResetRequest', passwordResetRequest)
            const localVarPath = `/api/auth/password/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 리프레시 토큰을 사용하여 새 액세스 토큰을 발급받습니다.
         * @summary 토큰 갱신
         * @param {string} refreshToken 리프레시 토큰
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefresh: async (refreshToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('authRefresh', 'refreshToken', refreshToken)
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (refreshToken != null) {
                localVarHeaderParameter['refreshToken'] = String(refreshToken);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 새로운 사용자 계정을 등록합니다.
         * @summary 회원 가입
         * @param {RegisterRequest} registerRequest 회원 가입 요청 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('authRegister', 'registerRequest', registerRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 사용자의 인증 컨텍스트 정보를 조회합니다.
         * @summary 인증 상태 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthState: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 인증된 사용자의 상세 정보를 반환합니다.
         * @summary 인증된 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 이메일과 비밀번호를 입력하여 로그인합니다. 성공 시 액세스 토큰과 리프레시 토큰을 반환합니다.
         * @summary 사용자 로그인
         * @param {LoginRequest} loginRequest 로그인 요청 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인된 사용자를 로그아웃 처리합니다.
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 비밀번호 재설정을 위한 이메일을 발송합니다.
         * @summary 비밀번호 재설정 요청
         * @param {PasswordResetRequest} passwordResetRequest 비밀번호 재설정 요청 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authPasswordReset(passwordResetRequest: PasswordResetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authPasswordReset(passwordResetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authPasswordReset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 리프레시 토큰을 사용하여 새 액세스 토큰을 발급받습니다.
         * @summary 토큰 갱신
         * @param {string} refreshToken 리프레시 토큰
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefresh(refreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefresh(refreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRefresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 새로운 사용자 계정을 등록합니다.
         * @summary 회원 가입
         * @param {RegisterRequest} registerRequest 회원 가입 요청 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegister(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 사용자의 인증 컨텍스트 정보를 조회합니다.
         * @summary 인증 상태 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthState(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthState(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getAuthState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 인증된 사용자의 상세 정보를 반환합니다.
         * @summary 인증된 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 이메일과 비밀번호를 입력하여 로그인합니다. 성공 시 액세스 토큰과 리프레시 토큰을 반환합니다.
         * @summary 사용자 로그인
         * @param {AuthApiAuthLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(requestParameters: AuthApiAuthLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.authLogin(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인된 사용자를 로그아웃 처리합니다.
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 비밀번호 재설정을 위한 이메일을 발송합니다.
         * @summary 비밀번호 재설정 요청
         * @param {AuthApiAuthPasswordResetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPasswordReset(requestParameters: AuthApiAuthPasswordResetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authPasswordReset(requestParameters.passwordResetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 리프레시 토큰을 사용하여 새 액세스 토큰을 발급받습니다.
         * @summary 토큰 갱신
         * @param {AuthApiAuthRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefresh(requestParameters: AuthApiAuthRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.authRefresh(requestParameters.refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 새로운 사용자 계정을 등록합니다.
         * @summary 회원 가입
         * @param {AuthApiAuthRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(requestParameters: AuthApiAuthRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authRegister(requestParameters.registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 사용자의 인증 컨텍스트 정보를 조회합니다.
         * @summary 인증 상태 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthState(options?: RawAxiosRequestConfig): AxiosPromise<AuthContext> {
            return localVarFp.getAuthState(options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 인증된 사용자의 상세 정보를 반환합니다.
         * @summary 인증된 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 이메일과 비밀번호를 입력하여 로그인합니다. 성공 시 액세스 토큰과 리프레시 토큰을 반환합니다.
     * @summary 사용자 로그인
     * @param {AuthApiAuthLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogin(requestParameters: AuthApiAuthLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse>;

    /**
     * 현재 로그인된 사용자를 로그아웃 처리합니다.
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogout(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 비밀번호 재설정을 위한 이메일을 발송합니다.
     * @summary 비밀번호 재설정 요청
     * @param {AuthApiAuthPasswordResetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authPasswordReset(requestParameters: AuthApiAuthPasswordResetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 리프레시 토큰을 사용하여 새 액세스 토큰을 발급받습니다.
     * @summary 토큰 갱신
     * @param {AuthApiAuthRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRefresh(requestParameters: AuthApiAuthRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse>;

    /**
     * 새로운 사용자 계정을 등록합니다.
     * @summary 회원 가입
     * @param {AuthApiAuthRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRegister(requestParameters: AuthApiAuthRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 현재 사용자의 인증 컨텍스트 정보를 조회합니다.
     * @summary 인증 상태 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getAuthState(options?: RawAxiosRequestConfig): AxiosPromise<AuthContext>;

    /**
     * 현재 인증된 사용자의 상세 정보를 반환합니다.
     * @summary 인증된 사용자 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse>;

}

/**
 * Request parameters for authLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginRequest
 */
export interface AuthApiAuthLoginRequest {
    /**
     * 로그인 요청 정보
     * @type {LoginRequest}
     * @memberof AuthApiAuthLogin
     */
    readonly loginRequest: LoginRequest
}

/**
 * Request parameters for authPasswordReset operation in AuthApi.
 * @export
 * @interface AuthApiAuthPasswordResetRequest
 */
export interface AuthApiAuthPasswordResetRequest {
    /**
     * 비밀번호 재설정 요청 정보
     * @type {PasswordResetRequest}
     * @memberof AuthApiAuthPasswordReset
     */
    readonly passwordResetRequest: PasswordResetRequest
}

/**
 * Request parameters for authRefresh operation in AuthApi.
 * @export
 * @interface AuthApiAuthRefreshRequest
 */
export interface AuthApiAuthRefreshRequest {
    /**
     * 리프레시 토큰
     * @type {string}
     * @memberof AuthApiAuthRefresh
     */
    readonly refreshToken: string
}

/**
 * Request parameters for authRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthRegisterRequest
 */
export interface AuthApiAuthRegisterRequest {
    /**
     * 회원 가입 요청 정보
     * @type {RegisterRequest}
     * @memberof AuthApiAuthRegister
     */
    readonly registerRequest: RegisterRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 이메일과 비밀번호를 입력하여 로그인합니다. 성공 시 액세스 토큰과 리프레시 토큰을 반환합니다.
     * @summary 사용자 로그인
     * @param {AuthApiAuthLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(requestParameters: AuthApiAuthLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogin(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인된 사용자를 로그아웃 처리합니다.
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogout(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 비밀번호 재설정을 위한 이메일을 발송합니다.
     * @summary 비밀번호 재설정 요청
     * @param {AuthApiAuthPasswordResetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authPasswordReset(requestParameters: AuthApiAuthPasswordResetRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authPasswordReset(requestParameters.passwordResetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 리프레시 토큰을 사용하여 새 액세스 토큰을 발급받습니다.
     * @summary 토큰 갱신
     * @param {AuthApiAuthRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefresh(requestParameters: AuthApiAuthRefreshRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefresh(requestParameters.refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 새로운 사용자 계정을 등록합니다.
     * @summary 회원 가입
     * @param {AuthApiAuthRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegister(requestParameters: AuthApiAuthRegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegister(requestParameters.registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 사용자의 인증 컨텍스트 정보를 조회합니다.
     * @summary 인증 상태 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getAuthState(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getAuthState(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 인증된 사용자의 상세 정보를 반환합니다.
     * @summary 인증된 사용자 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }
}



